
require vertex::pnu;
vertex {
	require modules::camera;
}

fragment {
	set material {
		vec3 color;
		vec3 normal;
		uint counter;
	};
}

vertex {
	set object {
		float time;
		mat4 model_world;
	};

	/*set sub_object {
		uint lol;
		double xdd;
	};*/

	out vec3 pos;
	out vec3 normal;
	out vec2 uv;

	void main(void)
	{
		vec4 in_pos_h = vec4(in_pos, 1.0);
		gl_Position = camera.vp * object.model_world * in_pos_h;
		//gl_Position = vec4(in_pos.x, in_pos.y, 0, 1);
		out_pos = (object.model_world * in_pos_h).xyz;
		out_normal = (object.model_world * vec4(in_normal, 1.0)).xyz;
		out_uv = in_uv;
	}
}

render_pass render_passes::deffered : albedo;

geometry {
	out vec3 pos;
	out vec3 normal;
	out vec2 uv;

	const vec2 off[3] = {vec2(-2), vec2(2), vec2(-2, 8)};

	void main(void)
	{
		for (int o = 0; o < off.length(); o++) {
			for (int i = 0; i < 3; i++) {
				gl_Position = gl_in[i].gl_Position;
				gl_Position.xy += off[o];
				out_pos = in_pos[i];
				out_normal = in_normal[i];
				out_uv = in_uv[i];
				EmitVertex();
			}
			EndPrimitive();
		}
	}
}

fragment {
	out vec3 color;
	out vec3 normal;

	void main(void)
	{
		vec3 lightp = vec3(-2.0, 1.0, -3.0);
		float dist = length(lightp - in_pos);

		vec3 color = normalize(in_normal) + vec3(material.counter / 256.0);
		//vec3 color = vec3(1.0);
		out_color = vec3(5.0 / (dist * dist)) * color;
	}
}

/*vertex {

	in vec3 in_pos;
	in vec3 in_normal;
	in vec2 in_uv;

	out vec3 vtx_pos;
	out vec3 vtx_normal;

	void main(void)
	{
		//vec3 in_pos = vec3(2.3);
		//vec2 pos;
		//gl_Position = object.mvp * vec4(in_pos, 1.0);
	}
}

fragment {
	out vec3 screen_color;

	void main(void)
	{
		screen_color = vec3(1.0);
	}
}*/