render_pass render_passes::opaque : compute;

require vertex::pnu;
require modules::camera;

fragment {
	set material {
		vec3 color;
		vec3 normal;
		uint counter;
	};
}

vertex {
	set object {
		float time;
		mat4 model_world;
	};

	out vec3 pos;
	out vec3 normal;
	out vec2 uv;

	void main(void)
	{
		vec4 in_pos_h = vec4((in)pos, 1.0);
		gl_Position = camera.vp * object.model_world * in_pos_h;
		(out)pos = (camera.view * object.model_world * in_pos_h).xyz;
		(out)normal = (in)normal;
		(out)uv = (in)uv;
	}
}

/*geometry {
	out vec3 pos;
	out vec3 normal;
	out vec2 uv;

	const vec2 off[3] = {vec2(-2), vec2(2), vec2(-2, 8)};

	void main(void)
	{
		for (int o = 0; o < off.length(); o++) {
			for (int i = 0; i < 3; i++) {
				gl_Position = gl_in[i].gl_Position;
				gl_Position.xy += off[o];
				(out)pos = (in)pos[i];
				(out)normal = (in)normal[i];
				(out)uv = (in)uv[i];
				EmitVertex();
			}
			EndPrimitive();
		}
	}
}*/

fragment {
	out vec3 albedo;
	out vec3 normal;

	void main(void)
	{
		(out)albedo = normalize((in)normal);
		(out)normal = normalize(cross(dFdx((in)pos), dFdy((in)pos))) * 0.5 + 0.5;
	}
}