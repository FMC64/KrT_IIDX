
render_pass render_passes::depth_range : compute;

require vertex::p2;
vertex {
	void main(void)
	{
		gl_Position = vec4((in)pos, 0, 1.0);
	}
}

fragment {
	out vec2 range;

	set fb {
		sampler2D depth_buffer;
	};

	const vec2[4] off = vec2[](
		vec2(0, 0),
		vec2(1, 0),
		vec2(0, 1),
		vec2(1, 1)
	);

	void main(void)
	{
		(out)range = vec2(0.5);
		return;
		float[4] values;

		for (int i = 0; i < 4; i++)
			values[i] = texture(fb.depth_buffer, gl_FragCoord.xy * 2 + off[i]).x;
		(out)range = vec2(
			min(min(min(values[0], values[1]), values[2]), values[3]),
			max(max(max(values[0], values[1]), values[2]), values[3])
		);
	}
}