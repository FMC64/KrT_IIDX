
render_pass render_passes::depth_range : compute;

require vertex::p2;
vertex {
	void main(void)
	{
		gl_Position = vec4((in)pos, 0, 1.0);
	}
}

fragment {
	out vec2 range;

	set fb {
		sampler2D depth_buffer;
	};

	const ivec2[4] off = ivec2[](
		ivec2(0, 0),
		ivec2(1, 0),
		ivec2(0, 1),
		ivec2(1, 1)
	);

	void main(void)
	{
		float[4] values;

		for (int i = 0; i < 4; i++)
			values[i] = textureLod(fb.depth_buffer, ivec2(gl_FragCoord.xy) * 2 + off[i], 0).x;
		(out)range = vec2(
			min(min(min(values[0], values[1]), values[2]), values[3]),
			max(max(max(values[0], values[1]), values[2]), values[3])
		);
	}
}