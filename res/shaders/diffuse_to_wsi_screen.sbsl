
render_pass render_passes::buffer_to_wsi_screen : compute;

require vertex::p2;
vertex {
	void main(void)
	{
		gl_Position = vec4((in)pos, 0, 1.0);
	}
}

fragment {
	set light {
		sampler2D diffuse;
		sampler2DArray cube_depth;
	};

	out vec3 wsi_screen;

	const float cube_size = 300.0;

	void main(void)
	{
		int layer = int(gl_FragCoord.x / cube_size);
		if (layer < 6 && gl_FragCoord.y < cube_size)
			(out)wsi_screen = textureLod(light.cube_depth, vec3((gl_FragCoord.x - cube_size * layer) / cube_size, gl_FragCoord.y / cube_size, layer), 0).xyz;
		else
			(out)wsi_screen = texture(light.diffuse, gl_FragCoord.xy).xyz * 0.8;
	}
}