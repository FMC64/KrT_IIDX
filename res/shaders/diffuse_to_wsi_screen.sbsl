
render_pass render_passes::buffer_to_wsi_screen : compute;

require vertex::p2;
vertex {
	void main(void)
	{
		gl_Position = vec4((in)pos, 0, 1.0);
	}
}

fragment {
	set light {
		usampler2D it_count;

		sampler2D diffuse;
		sampler2D albedo;
		sampler2D emissive;
		sampler2D reflection;
		sampler2DArray cube_depth;
		float cam_a, cam_b;
	};

	float depth_to_z(float depth)
	{
		return light.cam_b / (depth - light.cam_a);
	}

	out vec3 wsi_screen;

	const float cube_size = 400.0;

	void main(void)
	{
		int layer = int(int(gl_FragCoord.x / cube_size) + int(gl_FragCoord.y / cube_size) * 3);
		if (gl_FragCoord.x < cube_size * 3 && gl_FragCoord.y < cube_size * 2) {
			vec2 range = textureLod(light.cube_depth, vec3((gl_FragCoord.x - cube_size * int(gl_FragCoord.x / cube_size)) / cube_size, (gl_FragCoord.y - cube_size * int(gl_FragCoord.y / cube_size)) / cube_size, layer), 0).xy;
			(out)wsi_screen = vec3(depth_to_z(range.x) / 1000.0, depth_to_z(range.y) / 1000.0, 0.0);
		} else
			(out)wsi_screen = texture(light.diffuse, gl_FragCoord.xy).xyz * 0.8;
			(out)wsi_screen = texture(light.diffuse, gl_FragCoord.xy).xyz * 0.8;

		/*vec3 diffuse = texture(light.diffuse, gl_FragCoord.xy).xyz;
		vec3 albedo = texture(light.albedo, gl_FragCoord.xy).xyz;
		vec3 emissive = texture(light.emissive, gl_FragCoord.xy).xyz;
		vec3 irradiance = (diffuse - emissive) / albedo;
		(out)wsi_screen = irradiance * 0.25;*/

		//(out)wsi_screen = vec3(float(texture(light.it_count, gl_FragCoord.xy).x) / 8.0);
		(out)wsi_screen = texture(light.reflection, gl_FragCoord.xy).xyz;
	}
}