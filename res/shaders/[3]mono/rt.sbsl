
require modules::rt;

bool rt_traceRay(vec3 origin, vec3 dir, in sampler2D depth_buffer_fl, uint max_it_fac, out vec2 pos)
{
	vec3 p0, p1;
	rt_project_ray(origin, dir, p0, p1);

	vec3 normal = normalize(textureLod(rt_fb.normal, p0.xy, 0)).xyz;

	float bias = 0.025 * (1.0 - max(dot(normalize(origin), -normal), 0.0));

	vec2 dir2 = p1.xy - p0.xy;
	if (dir2 == vec2(0.0))
		return false;
	vec2 dir2n = -dir2;
	float dir_pp_bias = (1.0 / length(dir2)) / 64.0;

	float t = 0.0;

	int level = 0;

	float t_max;
	if (!rt_inter_rect_strong(vec2(0.0), vec2(textureSize(rt_fb.depth_buffer, 0) - 1), p0.xy, dir2, dir_pp_bias, t_max))
		return false;

	vec3 p = p0;
	uint it = 0;

	if (dot(normal, dir) < 0.0) {
		pos = p.xy;
		return true;
	}

	t += rt_cell_end(p.xy, dir2, float(1 << rt_fb.depth_buffer_trace_res)) + dir_pp_bias;
	p = mix(p0, p1, t);

	uint max_it = rt_fb.depth_buffer_max_it >> max_it_fac;
	while (it++ < max_it) {
		if (t >= t_max)
			return false;
		int cur_lev = level + rt_fb.depth_buffer_trace_res;
		int cell_lev = level == 0 ? 0 : cur_lev;
		float cell_size = float(1 << cell_lev);
		float start_d = mix(p0.z, p1.z, t + rt_cell_end(p.xy, dir2n, cell_size));
		float end_d = mix(p0.z, p1.z, t + rt_cell_end(p.xy, dir2, cell_size));
		vec2 range = textureLod(depth_buffer_fl, p.xy * rt_fb.depth_buffer_fl_size, cell_lev).xy;
		if (level == 0)
			range.x = rt_z_to_depth(rt_depth_to_z(range.x) + bias);
		if ((start_d >= range.x && start_d <= range.y) || (end_d >= range.x && end_d <= range.y)) {
			if (level == 0) {
				pos = p.xy;
				return true;
			}
			level--;
		} else {
			t += rt_cell_end(p.xy, dir2, float(1 << cur_lev)) + dir_pp_bias;
			p = mix(p0, p1, t);
			level++;
		}
	}
	return false;
}