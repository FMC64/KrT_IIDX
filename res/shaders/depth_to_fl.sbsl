
render_pass render_passes::depth_to_fl : compute;

require vertex::p2;

vertex {
	void main(void)
	{
		gl_Position = vec4((in)pos, 0, 1.0);
	}
}

fragment {
	set fb {
		sampler2D depth_buffer;
		sampler2D depth_inter_front;
		sampler2D depth_inter_back;
		sampler2D depth_buffer_max;
	};

	out vec4 depth_fl;

	void main(void)
	{
		float depth_buffer = texture(fb.depth_buffer, gl_FragCoord.xy, 0).x;
		float depth_inter_front = texture(fb.depth_inter_front, gl_FragCoord.xy, 0).x;
		float depth_inter_back = texture(fb.depth_inter_back, gl_FragCoord.xy, 0).x;
		float depth_buffer_max = texture(fb.depth_buffer_max, gl_FragCoord.xy, 0).x;
		(out)depth_fl = vec4(
			depth_buffer,
			depth_inter_front,
			depth_inter_back,
			depth_buffer_max == 0.0 ? 1.0 : depth_buffer_max
		);
	}
}